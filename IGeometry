using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Xml.Serialization;
using System.IO;

namespace Lib
{
    public interface IGeometry<T>: IComparable<T>
    {
        double Square { get; }
        double Diameter { get; }

        string ToString();
    }

    class Triangle : IGeometry<Triangle>
    {
        public double A { get; set; }
        public double B { get; set; }
        public double C { get; set; }

        public Triangle(double a, double b, double c)
        {
            if ((a + b < c) || (a + c < b) || (b + c < a)) throw new ArgumentException();
            if ((a <= 0) || (b <= 0) || (c <= 0)) throw new ArgumentException();
            A = a;
            B = b;
            C = c;
        }

        public double Square
        {
            get
            {
                double p = (A + B + C) / 2;
                return p * (p - A) * (p - B) * (p - C);
            }
        }

        public double Diameter { get { return A; } }

        public int CompareTo(Triangle other)
        {
            if (this.Diameter == other.Diameter) return 0;
            else if (this.Diameter > other.Diameter) return 1;
            else return -1;
        }

        public override string ToString()
        {
            return "Triangle: " + A + ", " + B + ", " + C + ". Square: " + Square + ". Diameter: " + Diameter + ".\n";
        }
    }

    class Circle : IGeometry<Circle>
    {
        public Circle(double r)
        {
            if (r <= 0) throw new ArgumentException();
        }

        public double R { get; set; }

        public double Square { get { return Math.PI * R * R; } }

        public double Diameter { get { return R * 2; } }

        public int CompareTo(Circle other)
        {
            if (this.Diameter == other.Diameter) return 0;
            else if (this.Diameter > other.Diameter) return 1;
            else return -1;
        }

        public override string ToString()
        {
            return "Circle: " + R + ". Square: " + Square + ". Diameter: " + Diameter + ".\n";
        }
    }

    [Serializable]
    class ListOfFigures<T> : IGeometry<T> where T : IGeometry<T>
    {
        List<T> list;

        public ListOfFigures() { list = new List<T>(); }

        public ListOfFigures(List<T> objs)
        {
            list = objs;
        }

        public double Square
        {
            get
            {
                double n = 0;
                for (int i = 0; i < list.Count; i++) n += list[i].Square;
                return n;
            }
        }

        public double Diameter
        {
            get
            {
                double n = 0;
                for (int i = 0; i < list.Count; i++) if (list[i].Diameter > n) n = list[i].Diameter;
                return n;
            }
        }

        public override string ToString()
        {
            string str = "";
            foreach (T obj in list) str += obj.ToString() + "\n";
            return str;
        }

        public int CompareTo(T obj)
        {
            if (this.Diameter > obj.Diameter) return 1;
            else if (this.Diameter == obj.Diameter) return 0;
            else return -1;
        }

        public static ListOfFigures<T> operator +(ListOfFigures<T> one, ListOfFigures<T> two)
        {
            List<T> l = one.list;
            foreach (T obj in two.list) l.Add(obj);
            return new ListOfFigures<T>(l);
        }

        private XmlSerializer serial;

        public void Serialization()
        {
            using (FileStream fs = new FileStream("figures.xml", FileMode.OpenOrCreate))
            {
                serial.Serialize(fs, this);
            }
        }

        public ListOfFigures<T> Deserialization()
        {
            using (FileStream fs = new FileStream("figures.xml", FileMode.Open))
            {
                ListOfFigures<T> list = (ListOfFigures<T>)serial.Deserialize(fs);
                return list;
            }
        }

        public static ListOfFigures<T> GetListOfFigures(int t, int c)
        {
            if ((t <= 0) || (c <= 0)) throw new ArgumentException();
            Random r = new Random();
            ListOfFigures<T> objs = new ListOfFigures<T>();
            List<T> list = objs.list;
            
        }
    }
}
